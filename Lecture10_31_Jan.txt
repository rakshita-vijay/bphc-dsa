algorithms :- why are they so important?:
----------------------------------------
problem: maximum subarray sum
input: a array of integers
output: maximum sum
constraints:
  1) time limit: 1 sec
  2) memory list: 256 mb
  3) 1 <= array size <= 10^6
  4) -10^9 <= array element <= 10^9

for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
        int currentSum = 0;
        for (int k = i; k <= j; k++) {
            currentSum += arr[k];
        }
        if (currentSum > maxSum) {
            maxSum = currentSum;
        }
    }
}

time complexity: O(n^3) - order of n^3

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

for (int i = 0; i < n; i++) {
  int currentSum = 0;
  for (int j = i; j < n; j++) {
    currentSum += arr[j];
    if (currentSum > maxSum) {
      maxSum = currentSum;
    }
  }
}

time complexity: O(n^2) - order of n^2

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

Kadane's Algorithm - most optimized:
-----------------------------------
for (int i = 0; i < n; i++) {
    currentSum = max(arr[i], currentSum + arr[i]);
    maxSum = max(maxSum, currentSum);
}

time complexity: O(n) - order of n

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

graphs:
------
X: input size (n)
Y: execution time

seating in the class everyday: O(1) - constant function (horizontal line)
ex: array indexing, variable assignment, basic arithmetic operations

reading chapters of a book: O(n) - angled line starting at origin, towards NE
ex: searching in an unsorted array, printing all elements of a list

climbing a ladder quickly: log2(n)
ex: finding a word in a dictionary, treasure hunt

population growth: 2^n - exponential fiunction
ex: fibonacci sequence, towers of hanoi, generating all subsets of a set

girl running 1 km everyday (mon: 1 km, tue: 1 km, wed: 1 km, etc)
is it linear? constant - yes
45 deg line
n(n+1)/2

boy running 1 km on mon, 2 km on tue, 3 km on wed, etc
Que: 1 + 4 + 9 + 16 + 25 + ... + n cubic - n(n+1)(2n+1)/6
this is cubic

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

Complexity?:
-----------

1) function isEvenOrOdd(n) {
      if (n % 2 == 0)
        return even;
      else
        return odd;
   }
   Complexity:
   - Time Complexity: O(1) → The function performs a single modulus operation and a conditional check.
   - Space Complexity: O(1) → No additional space is used.

2) Printing All Elements
   list<int> numbers {1, 2, 3, 4};
   for (int number : numbers) {
      cout << number << " ";
   }
   Complexity:
   - Time Complexity: O(n) → Iterates through all 'n' elements in the list.
   - Space Complexity: O(1) → Only prints elements, no extra memory used.

3) Partition Function for QuickSort
   int partition(int arr[], int low, int high) {
      int pivot = arr[high];
      int i = (low - 1);
      for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
          i++;
          swap(&arr[i], &arr[j]);
        }
      }
      swap(&arr[i + 1], &arr[high]);
      return (i + 1);
   }
   Complexity:
   - Time Complexity: O(n) → The loop runs for all elements from 'low' to 'high-1'.
   - Space Complexity: O(1) → Works in-place with no extra memory allocation.

4) Binary Search Function
   int binarySearch(int array[], int x, int low, int high) {
      while (low <= high) {
        int mid = low + (high - low) / 2;
        if (array[mid] == x) return mid;
        if (array[mid] < x)
          low = mid + 1;
        else
          high = mid - 1;
      }
      return -1;
   }
   Complexity:
   - Time Complexity: O(log n) → Each iteration halves the search space.
   - Space Complexity: O(1) → No extra memory allocation, works iteratively.

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

Cubic Example and Polynomial Functions:
--------------------------------------

Algorithm: Naive-Matrix-Multiply(A, B)

1. Procedure Overview:
   procedure NAIVE-MATRIX-MULTIPLY(A, B)
      n = A.rows
      let C be a new n × n matrix
      for i = 1 to n do
        for j = 1 to n do
          c_ij = 0
          for k = 1 to n do
            c_ij = c_ij + a_ik * b_kj
          end for
        end for
      end for
      return C
   end procedure

2. Analysis of Multiplications:
   - Outer Loops:
     - 'i' runs from '1' to 'n' (total 'n' iterations).
     - 'j' runs from '1' to 'n' for each value of 'i' (total 'n^2' iterations).
   - Inner Loop:
     - 'k' runs from '1' to 'n' for each pair of 'i' and 'j' (total 'n^3' iterations).
   - Total Multiplications:
      n    n    n       n    n       n
      ∑    ∑    ∑  1 =  ∑    ∑  n =  ∑  n^2 = n^3
     i=1  j=1  k=1     i=1  j=1     i=1

3. Time Complexity:
   - The algorithm requires O(n³) operations due to the triple nested loop structure.

Polynomials:
- All the functions shown are part of a class of polynomial functions:
  g(n) = a_0 + a_1n + a_2n^2 + a_3n^3 + ... + a_dn^d

What is d?
In this context, d is the highest degree of the polynomial, which determines the growth rate as n increases.
For the matrix multiplication algorithm:
d = 3 (from the cubic term n^3).

Graph Analysis:
- The graph on the right shows log-log plots of time complexities:
  - Linear: O(n) (straight line with a slope of 1)
  - Quadratic: O(n^2) (steeper slope of 2)
  - Cubic: O(n^3) (even steeper slope of 3)
The slope in the log-log plot corresponds to the growth rate (degree of n)

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*
